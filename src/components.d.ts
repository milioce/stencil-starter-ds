/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonColorTypes, ButtonFillTypes, ButtonIconPositionTypes, ButtonTypeTypes } from "./components/atoms/button/button.model";
import { GlobalSizeTypes } from "@shared/model";
import { InputFeedbackTypes, InputLabelPositionTypes, InputTypeTypes } from "./components/atoms/input/input.models";
export { ButtonColorTypes, ButtonFillTypes, ButtonIconPositionTypes, ButtonTypeTypes } from "./components/atoms/button/button.model";
export { GlobalSizeTypes } from "@shared/model";
export { InputFeedbackTypes, InputLabelPositionTypes, InputTypeTypes } from "./components/atoms/input/input.models";
export namespace Components {
    interface DsButton {
        /**
          * Whether the button is focused on page load
         */
        "autofocus": boolean;
        /**
          * The variant of the button
         */
        "color": ButtonColorTypes;
        /**
          * The button is disabled
         */
        "disabled": boolean;
        /**
          * The aria-controls attribute for the button
         */
        "dsAriaControls": string;
        /**
          * The aria-describedby attribute for the button
         */
        "dsAriaDescribedby": string;
        /**
          * The aria-expanded attribute for the button
         */
        "dsAriaExpanded": boolean;
        /**
          * The aria-haspopup attribute for the button
         */
        "dsAriaHaspopup": boolean;
        /**
          * The aria-label attribute for the button
         */
        "dsAriaLabel": string;
        /**
          * The aria-labelledby attribute for the button
         */
        "dsAriaLabelledby": string;
        /**
          * The aria-pressed attribute for the button
         */
        "dsAriaPressed": boolean;
        /**
          * The fill of the button (background and border color)
         */
        "fill": ButtonFillTypes;
        /**
          * The button takes up the full width of the container
         */
        "full": boolean;
        /**
          * Whether the button has an icon
         */
        "hasIcon": boolean;
        /**
          * The code of the button's icon (used with hasIcon)
         */
        "icon": string;
        /**
          * The position of the button's icon
         */
        "iconPosition": ButtonIconPositionTypes;
        /**
          * Whether the button shows a loading icon
         */
        "loading": boolean;
        /**
          * Whether the button has an icon
         */
        "onlyIcon": boolean;
        /**
          * The size of the buton
         */
        "size": GlobalSizeTypes;
        /**
          * The type of the button
         */
        "type": ButtonTypeTypes;
        /**
          * The URL of the button (used with type link)
         */
        "url": string;
    }
    interface DsIcon {
        /**
          * The aria-label attribute of the icon
         */
        "ariaLabel": string;
        /**
          * The icon color
         */
        "color": string;
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon
         */
        "size": GlobalSizeTypes;
    }
    interface DsInput {
        /**
          * If true, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * The aria-label attribute of the input
         */
        "dsAriaLabel": string;
        /**
          * The id of the element
         */
        "eid": string;
        /**
          * Show the feedback message.
         */
        "feedbackText": string;
        /**
          * The type of the feedback
         */
        "feedbackType": InputFeedbackTypes;
        /**
          * Determinate when show the error.
         */
        "hasError": boolean;
        /**
          * Whether the input has an icon
         */
        "hasIcon": boolean;
        /**
          * Message to help the user fills the input value
         */
        "helperMessage": string;
        /**
          * The code of the input's icon (used with hasIcon)
         */
        "icon": string;
        /**
          * Represents the caption of the input
         */
        "label": string;
        /**
          * Represents the position caption of the input
         */
        "labelPosition": InputLabelPositionTypes;
        /**
          * The name of the input. Submitted with the form as part of a name/value pair
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder": string;
        /**
          * If true, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If true, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * The size of the input
         */
        "size": GlobalSizeTypes;
        /**
          * The type of the input
         */
        "type": InputTypeTypes;
        /**
          * Current value of the form control. Submitted with the form as part of a name/value pair.
         */
        "value": string;
    }
}
export interface DsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsButtonElement;
}
export interface DsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsInputElement;
}
declare global {
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsIconElement extends Components.DsIcon, HTMLStencilElement {
    }
    var HTMLDsIconElement: {
        prototype: HTMLDsIconElement;
        new (): HTMLDsIconElement;
    };
    interface HTMLDsInputElement extends Components.DsInput, HTMLStencilElement {
    }
    var HTMLDsInputElement: {
        prototype: HTMLDsInputElement;
        new (): HTMLDsInputElement;
    };
    interface HTMLElementTagNameMap {
        "ds-button": HTMLDsButtonElement;
        "ds-icon": HTMLDsIconElement;
        "ds-input": HTMLDsInputElement;
    }
}
declare namespace LocalJSX {
    interface DsButton {
        /**
          * Whether the button is focused on page load
         */
        "autofocus"?: boolean;
        /**
          * The variant of the button
         */
        "color"?: ButtonColorTypes;
        /**
          * The button is disabled
         */
        "disabled"?: boolean;
        /**
          * The aria-controls attribute for the button
         */
        "dsAriaControls"?: string;
        /**
          * The aria-describedby attribute for the button
         */
        "dsAriaDescribedby"?: string;
        /**
          * The aria-expanded attribute for the button
         */
        "dsAriaExpanded"?: boolean;
        /**
          * The aria-haspopup attribute for the button
         */
        "dsAriaHaspopup"?: boolean;
        /**
          * The aria-label attribute for the button
         */
        "dsAriaLabel"?: string;
        /**
          * The aria-labelledby attribute for the button
         */
        "dsAriaLabelledby"?: string;
        /**
          * The aria-pressed attribute for the button
         */
        "dsAriaPressed"?: boolean;
        /**
          * The fill of the button (background and border color)
         */
        "fill"?: ButtonFillTypes;
        /**
          * The button takes up the full width of the container
         */
        "full"?: boolean;
        /**
          * Whether the button has an icon
         */
        "hasIcon"?: boolean;
        /**
          * The code of the button's icon (used with hasIcon)
         */
        "icon"?: string;
        /**
          * The position of the button's icon
         */
        "iconPosition"?: ButtonIconPositionTypes;
        /**
          * Whether the button shows a loading icon
         */
        "loading"?: boolean;
        /**
          * Emitted when the button loses focus
         */
        "onDsBlur"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button is clicked
         */
        "onDsClick"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button gains focus
         */
        "onDsFocus"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Whether the button has an icon
         */
        "onlyIcon"?: boolean;
        /**
          * The size of the buton
         */
        "size"?: GlobalSizeTypes;
        /**
          * The type of the button
         */
        "type"?: ButtonTypeTypes;
        /**
          * The URL of the button (used with type link)
         */
        "url"?: string;
    }
    interface DsIcon {
        /**
          * The aria-label attribute of the icon
         */
        "ariaLabel"?: string;
        /**
          * The icon color
         */
        "color"?: string;
        /**
          * The icon name
         */
        "icon"?: string;
        /**
          * The size of the icon
         */
        "size"?: GlobalSizeTypes;
    }
    interface DsInput {
        /**
          * If true, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * The aria-label attribute of the input
         */
        "dsAriaLabel"?: string;
        /**
          * The id of the element
         */
        "eid"?: string;
        /**
          * Show the feedback message.
         */
        "feedbackText"?: string;
        /**
          * The type of the feedback
         */
        "feedbackType"?: InputFeedbackTypes;
        /**
          * Determinate when show the error.
         */
        "hasError"?: boolean;
        /**
          * Whether the input has an icon
         */
        "hasIcon"?: boolean;
        /**
          * Message to help the user fills the input value
         */
        "helperMessage"?: string;
        /**
          * The code of the input's icon (used with hasIcon)
         */
        "icon"?: string;
        /**
          * Represents the caption of the input
         */
        "label"?: string;
        /**
          * Represents the position caption of the input
         */
        "labelPosition"?: InputLabelPositionTypes;
        /**
          * The name of the input. Submitted with the form as part of a name/value pair
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus
         */
        "onDsBlur"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed. This event doesn't fire until the control loses focus.
         */
        "onDsChange"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Emitted when the component is cleared
         */
        "onDsClear"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Emitted when the input gains focus
         */
        "onDsFocus"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted every time the value is updated by introducing a change
         */
        "onDsInput"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string;
        /**
          * If true, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If true, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * The size of the input
         */
        "size"?: GlobalSizeTypes;
        /**
          * The type of the input
         */
        "type"?: InputTypeTypes;
        /**
          * Current value of the form control. Submitted with the form as part of a name/value pair.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "ds-button": DsButton;
        "ds-icon": DsIcon;
        "ds-input": DsInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-icon": LocalJSX.DsIcon & JSXBase.HTMLAttributes<HTMLDsIconElement>;
            "ds-input": LocalJSX.DsInput & JSXBase.HTMLAttributes<HTMLDsInputElement>;
        }
    }
}
