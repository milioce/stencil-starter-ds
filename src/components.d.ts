/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonColorTypes, ButtonIconPositionTypes, ButtonTypeTypes } from "./components/atoms/button/models";
import { GlobalSizeTypes } from "@shared/model";
export { ButtonColorTypes, ButtonIconPositionTypes, ButtonTypeTypes } from "./components/atoms/button/models";
export { GlobalSizeTypes } from "@shared/model";
export namespace Components {
    interface DsButton {
        /**
          * The aria-controls attribute for the button
         */
        "ariaControls": string;
        /**
          * The aria-describedby attribute for the button
         */
        "ariaDescribedby": string;
        /**
          * The aria-expanded attribute for the button
         */
        "ariaExpanded": boolean;
        /**
          * The aria-haspopup attribute for the button
         */
        "ariaHaspopup": boolean;
        /**
          * The aria-label attribute for the button
         */
        "ariaLabel": string;
        /**
          * The aria-labelledby attribute for the button
         */
        "ariaLabelledby": string;
        /**
          * The aria-pressed attribute for the button
         */
        "ariaPressed": boolean;
        /**
          * Whether the button is focused on page load
         */
        "autofocus": boolean;
        /**
          * The variant of the button
         */
        "color": ButtonColorTypes;
        /**
          * Whether the button is disabled
         */
        "disabled": boolean;
        /**
          * Whether the button takes up the full width of the container
         */
        "full": boolean;
        /**
          * Whether the button has an icon
         */
        "hasIcon": boolean;
        /**
          * The code of the button's icon (used with hasIcon)
         */
        "icon": string;
        /**
          * The position of the button's icon
         */
        "iconPosition": ButtonIconPositionTypes;
        /**
          * Whether the button shows a loading icon
         */
        "loading": boolean;
        /**
          * Whether the button is outlined (only border, no background)
         */
        "outlined": boolean;
        /**
          * The size of the buton
         */
        "size": GlobalSizeTypes;
        /**
          * The type of the button
         */
        "type": ButtonTypeTypes;
        /**
          * The URL of the button (used with type link)
         */
        "url": string;
    }
    interface DsIcon {
        "ariaLabel": string;
        "color": string;
        "icon": string;
        "size": GlobalSizeTypes;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface DsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsButtonElement;
}
declare global {
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsIconElement extends Components.DsIcon, HTMLStencilElement {
    }
    var HTMLDsIconElement: {
        prototype: HTMLDsIconElement;
        new (): HTMLDsIconElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "ds-button": HTMLDsButtonElement;
        "ds-icon": HTMLDsIconElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface DsButton {
        /**
          * The aria-controls attribute for the button
         */
        "ariaControls"?: string;
        /**
          * The aria-describedby attribute for the button
         */
        "ariaDescribedby"?: string;
        /**
          * The aria-expanded attribute for the button
         */
        "ariaExpanded"?: boolean;
        /**
          * The aria-haspopup attribute for the button
         */
        "ariaHaspopup"?: boolean;
        /**
          * The aria-label attribute for the button
         */
        "ariaLabel"?: string;
        /**
          * The aria-labelledby attribute for the button
         */
        "ariaLabelledby"?: string;
        /**
          * The aria-pressed attribute for the button
         */
        "ariaPressed"?: boolean;
        /**
          * Whether the button is focused on page load
         */
        "autofocus"?: boolean;
        /**
          * The variant of the button
         */
        "color"?: ButtonColorTypes;
        /**
          * Whether the button is disabled
         */
        "disabled"?: boolean;
        /**
          * Whether the button takes up the full width of the container
         */
        "full"?: boolean;
        /**
          * Whether the button has an icon
         */
        "hasIcon"?: boolean;
        /**
          * The code of the button's icon (used with hasIcon)
         */
        "icon"?: string;
        /**
          * The position of the button's icon
         */
        "iconPosition"?: ButtonIconPositionTypes;
        /**
          * Whether the button shows a loading icon
         */
        "loading"?: boolean;
        /**
          * Emitted when the button loses focus
         */
        "onDsBlur"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button is clicked
         */
        "onDsClick"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button gains focus
         */
        "onDsFocus"?: (event: DsButtonCustomEvent<void>) => void;
        /**
          * Whether the button is outlined (only border, no background)
         */
        "outlined"?: boolean;
        /**
          * The size of the buton
         */
        "size"?: GlobalSizeTypes;
        /**
          * The type of the button
         */
        "type"?: ButtonTypeTypes;
        /**
          * The URL of the button (used with type link)
         */
        "url"?: string;
    }
    interface DsIcon {
        "ariaLabel"?: string;
        "color"?: string;
        "icon"?: string;
        "size"?: GlobalSizeTypes;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "ds-button": DsButton;
        "ds-icon": DsIcon;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-icon": LocalJSX.DsIcon & JSXBase.HTMLAttributes<HTMLDsIconElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
